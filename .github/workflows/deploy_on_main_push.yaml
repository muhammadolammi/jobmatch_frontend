name: Build and Deploy

on:
  push:
    branches:
      - main  

env:
  gpgkey: ${{ secrets.GPG_KEY }}

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  build:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read


    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Set up Go
        uses: actions/setup-go@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'     
          cache: 'npm'

      

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_KEY }}
          REACT_APP_AUTH_TOKEN: ${{ secrets.REACT_APP_BASE_URL }}
     

      - name: Build the server binary
        run: |
          chmod +x ./build.sh
          ./build.sh

      - name: Set version to Git env
        run: echo "DEPLOY_VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build new Docker image
        run: |
          docker build . \
            -t muhammadolammi/jobmatch-frontend:latest \
            -t muhammadolammi/jobmatch-frontend:${{ env.DEPLOY_VERSION }}
          docker image ls 

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker images
        run: docker push muhammadolammi/jobmatch-frontend --all-tags

  deploy:
    needs: build
    name: Deploy to host
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Decrypt SSH key
        run: |
          mkdir secrets
          gpg --quiet --batch --yes --decrypt \
            --passphrase="$gpgkey" \
            --output secrets/key.pem key.pem.gpg
          chmod 400 secrets/key.pem

      - name: Pull Docker image on droplet
        run: |
          ssh -o StrictHostKeyChecking=no -i secrets/key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            'sudo docker pull muhammadolammi/jobmatch-frontend:latest'

      - name: Restart Docker container
        run: |
          ssh -o StrictHostKeyChecking=no -i secrets/key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} <<'EOF'
          sudo docker stop frontend || true
          sudo docker rm frontend || true
          sudo docker run -d \
            --network main \
            --name frontend \
            muhammadolammi/jobmatch-frontend:latest
          EOF
